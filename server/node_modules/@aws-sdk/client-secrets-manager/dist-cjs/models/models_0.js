"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateSecretRequestFilterSensitiveLog = exports.PutSecretValueRequestFilterSensitiveLog = exports.GetSecretValueResponseFilterSensitiveLog = exports.GetRandomPasswordResponseFilterSensitiveLog = exports.CreateSecretRequestFilterSensitiveLog = exports.PublicPolicyException = exports.SortOrderType = exports.InvalidNextTokenException = exports.FilterNameStringType = exports.ResourceExistsException = exports.PreconditionNotMetException = exports.MalformedPolicyDocumentException = exports.LimitExceededException = exports.EncryptionFailure = exports.DecryptionFailure = exports.StatusType = exports.ResourceNotFoundException = exports.InvalidRequestException = exports.InvalidParameterException = exports.InternalServiceError = void 0;
const smithy_client_1 = require("@smithy/smithy-client");
const SecretsManagerServiceException_1 = require("./SecretsManagerServiceException");
class InternalServiceError extends SecretsManagerServiceException_1.SecretsManagerServiceException {
    constructor(opts) {
        super({
            name: "InternalServiceError",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServiceError";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServiceError.prototype);
        this.Message = opts.Message;
    }
}
exports.InternalServiceError = InternalServiceError;
class InvalidParameterException extends SecretsManagerServiceException_1.SecretsManagerServiceException {
    constructor(opts) {
        super({
            name: "InvalidParameterException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidParameterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidParameterException.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidParameterException = InvalidParameterException;
class InvalidRequestException extends SecretsManagerServiceException_1.SecretsManagerServiceException {
    constructor(opts) {
        super({
            name: "InvalidRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidRequestException = InvalidRequestException;
class ResourceNotFoundException extends SecretsManagerServiceException_1.SecretsManagerServiceException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
exports.ResourceNotFoundException = ResourceNotFoundException;
exports.StatusType = {
    Failed: "Failed",
    InProgress: "InProgress",
    InSync: "InSync",
};
class DecryptionFailure extends SecretsManagerServiceException_1.SecretsManagerServiceException {
    constructor(opts) {
        super({
            name: "DecryptionFailure",
            $fault: "client",
            ...opts,
        });
        this.name = "DecryptionFailure";
        this.$fault = "client";
        Object.setPrototypeOf(this, DecryptionFailure.prototype);
        this.Message = opts.Message;
    }
}
exports.DecryptionFailure = DecryptionFailure;
class EncryptionFailure extends SecretsManagerServiceException_1.SecretsManagerServiceException {
    constructor(opts) {
        super({
            name: "EncryptionFailure",
            $fault: "client",
            ...opts,
        });
        this.name = "EncryptionFailure";
        this.$fault = "client";
        Object.setPrototypeOf(this, EncryptionFailure.prototype);
        this.Message = opts.Message;
    }
}
exports.EncryptionFailure = EncryptionFailure;
class LimitExceededException extends SecretsManagerServiceException_1.SecretsManagerServiceException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
exports.LimitExceededException = LimitExceededException;
class MalformedPolicyDocumentException extends SecretsManagerServiceException_1.SecretsManagerServiceException {
    constructor(opts) {
        super({
            name: "MalformedPolicyDocumentException",
            $fault: "client",
            ...opts,
        });
        this.name = "MalformedPolicyDocumentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MalformedPolicyDocumentException.prototype);
        this.Message = opts.Message;
    }
}
exports.MalformedPolicyDocumentException = MalformedPolicyDocumentException;
class PreconditionNotMetException extends SecretsManagerServiceException_1.SecretsManagerServiceException {
    constructor(opts) {
        super({
            name: "PreconditionNotMetException",
            $fault: "client",
            ...opts,
        });
        this.name = "PreconditionNotMetException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PreconditionNotMetException.prototype);
        this.Message = opts.Message;
    }
}
exports.PreconditionNotMetException = PreconditionNotMetException;
class ResourceExistsException extends SecretsManagerServiceException_1.SecretsManagerServiceException {
    constructor(opts) {
        super({
            name: "ResourceExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceExistsException.prototype);
        this.Message = opts.Message;
    }
}
exports.ResourceExistsException = ResourceExistsException;
exports.FilterNameStringType = {
    all: "all",
    description: "description",
    name: "name",
    owning_service: "owning-service",
    primary_region: "primary-region",
    tag_key: "tag-key",
    tag_value: "tag-value",
};
class InvalidNextTokenException extends SecretsManagerServiceException_1.SecretsManagerServiceException {
    constructor(opts) {
        super({
            name: "InvalidNextTokenException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidNextTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidNextTokenException.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidNextTokenException = InvalidNextTokenException;
exports.SortOrderType = {
    asc: "asc",
    desc: "desc",
};
class PublicPolicyException extends SecretsManagerServiceException_1.SecretsManagerServiceException {
    constructor(opts) {
        super({
            name: "PublicPolicyException",
            $fault: "client",
            ...opts,
        });
        this.name = "PublicPolicyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PublicPolicyException.prototype);
        this.Message = opts.Message;
    }
}
exports.PublicPolicyException = PublicPolicyException;
const CreateSecretRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SecretBinary && { SecretBinary: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.SecretString && { SecretString: smithy_client_1.SENSITIVE_STRING }),
});
exports.CreateSecretRequestFilterSensitiveLog = CreateSecretRequestFilterSensitiveLog;
const GetRandomPasswordResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.RandomPassword && { RandomPassword: smithy_client_1.SENSITIVE_STRING }),
});
exports.GetRandomPasswordResponseFilterSensitiveLog = GetRandomPasswordResponseFilterSensitiveLog;
const GetSecretValueResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SecretBinary && { SecretBinary: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.SecretString && { SecretString: smithy_client_1.SENSITIVE_STRING }),
});
exports.GetSecretValueResponseFilterSensitiveLog = GetSecretValueResponseFilterSensitiveLog;
const PutSecretValueRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SecretBinary && { SecretBinary: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.SecretString && { SecretString: smithy_client_1.SENSITIVE_STRING }),
});
exports.PutSecretValueRequestFilterSensitiveLog = PutSecretValueRequestFilterSensitiveLog;
const UpdateSecretRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SecretBinary && { SecretBinary: smithy_client_1.SENSITIVE_STRING }),
    ...(obj.SecretString && { SecretString: smithy_client_1.SENSITIVE_STRING }),
});
exports.UpdateSecretRequestFilterSensitiveLog = UpdateSecretRequestFilterSensitiveLog;
